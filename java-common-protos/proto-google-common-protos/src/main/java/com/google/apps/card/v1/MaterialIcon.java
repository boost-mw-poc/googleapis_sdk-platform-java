/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/card/v1/card.proto

// Protobuf Java Version: 3.25.5
package com.google.apps.card.v1;

/**
 *
 *
 * <pre>
 * A [Google Material Icon](https://fonts.google.com/icons), which includes over
 * 2500+ options.
 *
 * For example, to display a [checkbox
 * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048)
 * with customized weight and grade, write the following:
 *
 * ```
 * {
 *   "name": "check_box",
 *   "fill": true,
 *   "weight": 300,
 *   "grade": -25
 * }
 * ```
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 * </pre>
 *
 * Protobuf type {@code google.apps.card.v1.MaterialIcon}
 */
public final class MaterialIcon
    extends com.google.protobuf.GeneratedMessageLite<MaterialIcon, MaterialIcon.Builder>
    implements
    // @@protoc_insertion_point(message_implements:google.apps.card.v1.MaterialIcon)
    MaterialIconOrBuilder {
  private MaterialIcon() {
    name_ = "";
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   *
   *
   * <pre>
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   *
   *
   * <pre>
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   *
   *
   * <pre>
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @param value The name to set.
   */
  private void setName(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    name_ = value;
  }
  /**
   *
   *
   * <pre>
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {

    name_ = getDefaultInstance().getName();
  }
  /**
   *
   *
   * <pre>
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @param value The bytes for name to set.
   */
  private void setNameBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
  }

  public static final int FILL_FIELD_NUMBER = 2;
  private boolean fill_;
  /**
   *
   *
   * <pre>
   * Whether the icon renders as filled. Default value is false.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>bool fill = 2;</code>
   *
   * @return The fill.
   */
  @java.lang.Override
  public boolean getFill() {
    return fill_;
  }
  /**
   *
   *
   * <pre>
   * Whether the icon renders as filled. Default value is false.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>bool fill = 2;</code>
   *
   * @param value The fill to set.
   */
  private void setFill(boolean value) {

    fill_ = value;
  }
  /**
   *
   *
   * <pre>
   * Whether the icon renders as filled. Default value is false.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>bool fill = 2;</code>
   */
  private void clearFill() {

    fill_ = false;
  }

  public static final int WEIGHT_FIELD_NUMBER = 3;
  private int weight_;
  /**
   *
   *
   * <pre>
   * The stroke weight of the icon. Choose from {100, 200, 300, 400,
   * 500, 600, 700}. If absent, default value is 400. If any other value is
   * specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 weight = 3;</code>
   *
   * @return The weight.
   */
  @java.lang.Override
  public int getWeight() {
    return weight_;
  }
  /**
   *
   *
   * <pre>
   * The stroke weight of the icon. Choose from {100, 200, 300, 400,
   * 500, 600, 700}. If absent, default value is 400. If any other value is
   * specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 weight = 3;</code>
   *
   * @param value The weight to set.
   */
  private void setWeight(int value) {

    weight_ = value;
  }
  /**
   *
   *
   * <pre>
   * The stroke weight of the icon. Choose from {100, 200, 300, 400,
   * 500, 600, 700}. If absent, default value is 400. If any other value is
   * specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 weight = 3;</code>
   */
  private void clearWeight() {

    weight_ = 0;
  }

  public static final int GRADE_FIELD_NUMBER = 4;
  private int grade_;
  /**
   *
   *
   * <pre>
   * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
   * granular than adjustments to weight and have a small impact on the size of
   * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
   * any other value is specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 grade = 4;</code>
   *
   * @return The grade.
   */
  @java.lang.Override
  public int getGrade() {
    return grade_;
  }
  /**
   *
   *
   * <pre>
   * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
   * granular than adjustments to weight and have a small impact on the size of
   * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
   * any other value is specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 grade = 4;</code>
   *
   * @param value The grade to set.
   */
  private void setGrade(int value) {

    grade_ = value;
  }
  /**
   *
   *
   * <pre>
   * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
   * granular than adjustments to weight and have a small impact on the size of
   * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
   * any other value is specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   * </pre>
   *
   * <code>int32 grade = 4;</code>
   */
  private void clearGrade() {

    grade_ = 0;
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.MaterialIcon parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.MaterialIcon parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.MaterialIcon parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }

  public static Builder newBuilder(com.google.apps.card.v1.MaterialIcon prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   *
   *
   * <pre>
   * A [Google Material Icon](https://fonts.google.com/icons), which includes over
   * 2500+ options.
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048)
   * with customized weight and grade, write the following:
   *
   * ```
   * {
   *   "name": "check_box",
   *   "fill": true,
   *   "weight": 300,
   *   "grade": -25
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * Protobuf type {@code google.apps.card.v1.MaterialIcon}
   */
  public static final class Builder
      extends com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.apps.card.v1.MaterialIcon, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.apps.card.v1.MaterialIcon)
      com.google.apps.card.v1.MaterialIconOrBuilder {
    // Construct using com.google.apps.card.v1.MaterialIcon.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    /**
     *
     *
     * <pre>
     * The icon name defined in the [Google Material
     * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
     * invalid names are abandoned and replaced with empty string and
     * results in the icon failing to render.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     *
     *
     * <pre>
     * The icon name defined in the [Google Material
     * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
     * invalid names are abandoned and replaced with empty string and
     * results in the icon failing to render.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     *
     *
     * <pre>
     * The icon name defined in the [Google Material
     * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
     * invalid names are abandoned and replaced with empty string and
     * results in the icon failing to render.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The icon name defined in the [Google Material
     * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
     * invalid names are abandoned and replaced with empty string and
     * results in the icon failing to render.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The icon name defined in the [Google Material
     * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
     * invalid names are abandoned and replaced with empty string and
     * results in the icon failing to render.
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * Whether the icon renders as filled. Default value is false.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>bool fill = 2;</code>
     *
     * @return The fill.
     */
    @java.lang.Override
    public boolean getFill() {
      return instance.getFill();
    }
    /**
     *
     *
     * <pre>
     * Whether the icon renders as filled. Default value is false.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>bool fill = 2;</code>
     *
     * @param value The fill to set.
     * @return This builder for chaining.
     */
    public Builder setFill(boolean value) {
      copyOnWrite();
      instance.setFill(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether the icon renders as filled. Default value is false.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>bool fill = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearFill() {
      copyOnWrite();
      instance.clearFill();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The stroke weight of the icon. Choose from {100, 200, 300, 400,
     * 500, 600, 700}. If absent, default value is 400. If any other value is
     * specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 weight = 3;</code>
     *
     * @return The weight.
     */
    @java.lang.Override
    public int getWeight() {
      return instance.getWeight();
    }
    /**
     *
     *
     * <pre>
     * The stroke weight of the icon. Choose from {100, 200, 300, 400,
     * 500, 600, 700}. If absent, default value is 400. If any other value is
     * specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 weight = 3;</code>
     *
     * @param value The weight to set.
     * @return This builder for chaining.
     */
    public Builder setWeight(int value) {
      copyOnWrite();
      instance.setWeight(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The stroke weight of the icon. Choose from {100, 200, 300, 400,
     * 500, 600, 700}. If absent, default value is 400. If any other value is
     * specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 weight = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearWeight() {
      copyOnWrite();
      instance.clearWeight();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
     * granular than adjustments to weight and have a small impact on the size of
     * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
     * any other value is specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 grade = 4;</code>
     *
     * @return The grade.
     */
    @java.lang.Override
    public int getGrade() {
      return instance.getGrade();
    }
    /**
     *
     *
     * <pre>
     * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
     * granular than adjustments to weight and have a small impact on the size of
     * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
     * any other value is specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 grade = 4;</code>
     *
     * @param value The grade to set.
     * @return This builder for chaining.
     */
    public Builder setGrade(int value) {
      copyOnWrite();
      instance.setGrade(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
     * granular than adjustments to weight and have a small impact on the size of
     * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
     * any other value is specified, the default value is used.
     *
     * To preview different icon settings, go to
     * [Google Font Icons](https://fonts.google.com/icons) and adjust the
     * settings under **Customize**.
     * </pre>
     *
     * <code>int32 grade = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearGrade() {
      copyOnWrite();
      instance.clearGrade();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.apps.card.v1.MaterialIcon)
  }

  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0,
      java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE:
        {
          return new com.google.apps.card.v1.MaterialIcon();
        }
      case NEW_BUILDER:
        {
          return new Builder();
        }
      case BUILD_MESSAGE_INFO:
        {
          java.lang.Object[] objects =
              new java.lang.Object[] {
                "name_", "fill_", "weight_", "grade_",
              };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u0208\u0002\u0007"
                  + "\u0003\u0004\u0004\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
      case GET_DEFAULT_INSTANCE:
        {
          return DEFAULT_INSTANCE;
        }
      case GET_PARSER:
        {
          com.google.protobuf.Parser<com.google.apps.card.v1.MaterialIcon> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.apps.card.v1.MaterialIcon.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.apps.card.v1.MaterialIcon>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
        }
      case GET_MEMOIZED_IS_INITIALIZED:
        {
          return (byte) 1;
        }
      case SET_MEMOIZED_IS_INITIALIZED:
        {
          return null;
        }
    }
    throw new UnsupportedOperationException();
  }

  // @@protoc_insertion_point(class_scope:google.apps.card.v1.MaterialIcon)
  private static final com.google.apps.card.v1.MaterialIcon DEFAULT_INSTANCE;

  static {
    MaterialIcon defaultInstance = new MaterialIcon();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        MaterialIcon.class, defaultInstance);
  }

  public static com.google.apps.card.v1.MaterialIcon getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MaterialIcon> PARSER;

  public static com.google.protobuf.Parser<MaterialIcon> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
