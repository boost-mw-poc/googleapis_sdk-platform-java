/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/card/v1/card.proto

// Protobuf Java Version: 3.25.5
package com.google.apps.card.v1;

/**
 *
 *
 * <pre>
 * Lets users input a date, a time, or both a date and a time. For an example in
 * Google Chat apps, see [Let a user pick a date and
 * time](https://developers.google.com/workspace/chat/design-interactive-card-dialog#let_a_user_pick_a_date_and_time).
 *
 * Users can input text or use the picker to select dates and times. If users
 * input an invalid date or time, the picker shows an error that prompts users
 * to input the information correctly.
 *
 * [Google Workspace
 * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 * </pre>
 *
 * Protobuf type {@code google.apps.card.v1.DateTimePicker}
 */
public final class DateTimePicker
    extends com.google.protobuf.GeneratedMessageLite<DateTimePicker, DateTimePicker.Builder>
    implements
    // @@protoc_insertion_point(message_implements:google.apps.card.v1.DateTimePicker)
    DateTimePickerOrBuilder {
  private DateTimePicker() {
    name_ = "";
    label_ = "";
  }
  /**
   *
   *
   * <pre>
   * The format for the date and time in the `DateTimePicker` widget.
   * Determines whether users can input a date, a time, or both a date and time.
   *
   * [Google Workspace Add-ons and Chat
   * apps](https://developers.google.com/workspace/extend):
   * </pre>
   *
   * Protobuf enum {@code google.apps.card.v1.DateTimePicker.DateTimePickerType}
   */
  public enum DateTimePickerType implements com.google.protobuf.Internal.EnumLite {
    /**
     *
     *
     * <pre>
     * Users input a date and time.
     * </pre>
     *
     * <code>DATE_AND_TIME = 0;</code>
     */
    DATE_AND_TIME(0),
    /**
     *
     *
     * <pre>
     * Users input a date.
     * </pre>
     *
     * <code>DATE_ONLY = 1;</code>
     */
    DATE_ONLY(1),
    /**
     *
     *
     * <pre>
     * Users input a time.
     * </pre>
     *
     * <code>TIME_ONLY = 2;</code>
     */
    TIME_ONLY(2),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Users input a date and time.
     * </pre>
     *
     * <code>DATE_AND_TIME = 0;</code>
     */
    public static final int DATE_AND_TIME_VALUE = 0;
    /**
     *
     *
     * <pre>
     * Users input a date.
     * </pre>
     *
     * <code>DATE_ONLY = 1;</code>
     */
    public static final int DATE_ONLY_VALUE = 1;
    /**
     *
     *
     * <pre>
     * Users input a time.
     * </pre>
     *
     * <code>TIME_ONLY = 2;</code>
     */
    public static final int TIME_ONLY_VALUE = 2;

    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DateTimePickerType valueOf(int value) {
      return forNumber(value);
    }

    public static DateTimePickerType forNumber(int value) {
      switch (value) {
        case 0:
          return DATE_AND_TIME;
        case 1:
          return DATE_ONLY;
        case 2:
          return TIME_ONLY;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DateTimePickerType>
        internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<DateTimePickerType>
        internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DateTimePickerType>() {
              @java.lang.Override
              public DateTimePickerType findValueByNumber(int number) {
                return DateTimePickerType.forNumber(number);
              }
            };

    public static com.google.protobuf.Internal.EnumVerifier internalGetVerifier() {
      return DateTimePickerTypeVerifier.INSTANCE;
    }

    private static final class DateTimePickerTypeVerifier
        implements com.google.protobuf.Internal.EnumVerifier {
      static final com.google.protobuf.Internal.EnumVerifier INSTANCE =
          new DateTimePickerTypeVerifier();

      @java.lang.Override
      public boolean isInRange(int number) {
        return DateTimePickerType.forNumber(number) != null;
      }
    };

    private final int value;

    private DateTimePickerType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.apps.card.v1.DateTimePicker.DateTimePickerType)
  }

  private int bitField0_;
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   *
   *
   * <pre>
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   *
   *
   * <pre>
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   *
   *
   * <pre>
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @param value The name to set.
   */
  private void setName(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    name_ = value;
  }
  /**
   *
   *
   * <pre>
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {

    name_ = getDefaultInstance().getName();
  }
  /**
   *
   *
   * <pre>
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @param value The bytes for name to set.
   */
  private void setNameBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
  }

  public static final int LABEL_FIELD_NUMBER = 2;
  private java.lang.String label_;
  /**
   *
   *
   * <pre>
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   * </pre>
   *
   * <code>string label = 2;</code>
   *
   * @return The label.
   */
  @java.lang.Override
  public java.lang.String getLabel() {
    return label_;
  }
  /**
   *
   *
   * <pre>
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   * </pre>
   *
   * <code>string label = 2;</code>
   *
   * @return The bytes for label.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getLabelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(label_);
  }
  /**
   *
   *
   * <pre>
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   * </pre>
   *
   * <code>string label = 2;</code>
   *
   * @param value The label to set.
   */
  private void setLabel(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    label_ = value;
  }
  /**
   *
   *
   * <pre>
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   * </pre>
   *
   * <code>string label = 2;</code>
   */
  private void clearLabel() {

    label_ = getDefaultInstance().getLabel();
  }
  /**
   *
   *
   * <pre>
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   * </pre>
   *
   * <code>string label = 2;</code>
   *
   * @param value The bytes for label to set.
   */
  private void setLabelBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    label_ = value.toStringUtf8();
  }

  public static final int TYPE_FIELD_NUMBER = 3;
  private int type_;
  /**
   *
   *
   * <pre>
   * Whether the widget supports inputting a date, a time, or the date and time.
   * </pre>
   *
   * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
   *
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override
  public int getTypeValue() {
    return type_;
  }
  /**
   *
   *
   * <pre>
   * Whether the widget supports inputting a date, a time, or the date and time.
   * </pre>
   *
   * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
   *
   * @return The type.
   */
  @java.lang.Override
  public com.google.apps.card.v1.DateTimePicker.DateTimePickerType getType() {
    com.google.apps.card.v1.DateTimePicker.DateTimePickerType result =
        com.google.apps.card.v1.DateTimePicker.DateTimePickerType.forNumber(type_);
    return result == null
        ? com.google.apps.card.v1.DateTimePicker.DateTimePickerType.UNRECOGNIZED
        : result;
  }
  /**
   *
   *
   * <pre>
   * Whether the widget supports inputting a date, a time, or the date and time.
   * </pre>
   *
   * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
   *
   * @param value The enum numeric value on the wire for type to set.
   */
  private void setTypeValue(int value) {
    type_ = value;
  }
  /**
   *
   *
   * <pre>
   * Whether the widget supports inputting a date, a time, or the date and time.
   * </pre>
   *
   * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
   *
   * @param value The type to set.
   */
  private void setType(com.google.apps.card.v1.DateTimePicker.DateTimePickerType value) {
    type_ = value.getNumber();
  }
  /**
   *
   *
   * <pre>
   * Whether the widget supports inputting a date, a time, or the date and time.
   * </pre>
   *
   * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
   */
  private void clearType() {

    type_ = 0;
  }

  public static final int VALUE_MS_EPOCH_FIELD_NUMBER = 4;
  private long valueMsEpoch_;
  /**
   *
   *
   * <pre>
   * The default value displayed in the widget, in milliseconds since [Unix
   * epoch time](https://en.wikipedia.org/wiki/Unix_time).
   *
   * Specify the value based on the type of picker (`DateTimePickerType`):
   *
   * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
   *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
   * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
   *   January 1, 2023, use `1672531200000`.
   * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
   *   `43200000` (or `12 * 60 * 60 * 1000`).
   * </pre>
   *
   * <code>int64 value_ms_epoch = 4;</code>
   *
   * @return The valueMsEpoch.
   */
  @java.lang.Override
  public long getValueMsEpoch() {
    return valueMsEpoch_;
  }
  /**
   *
   *
   * <pre>
   * The default value displayed in the widget, in milliseconds since [Unix
   * epoch time](https://en.wikipedia.org/wiki/Unix_time).
   *
   * Specify the value based on the type of picker (`DateTimePickerType`):
   *
   * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
   *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
   * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
   *   January 1, 2023, use `1672531200000`.
   * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
   *   `43200000` (or `12 * 60 * 60 * 1000`).
   * </pre>
   *
   * <code>int64 value_ms_epoch = 4;</code>
   *
   * @param value The valueMsEpoch to set.
   */
  private void setValueMsEpoch(long value) {

    valueMsEpoch_ = value;
  }
  /**
   *
   *
   * <pre>
   * The default value displayed in the widget, in milliseconds since [Unix
   * epoch time](https://en.wikipedia.org/wiki/Unix_time).
   *
   * Specify the value based on the type of picker (`DateTimePickerType`):
   *
   * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
   *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
   * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
   *   January 1, 2023, use `1672531200000`.
   * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
   *   `43200000` (or `12 * 60 * 60 * 1000`).
   * </pre>
   *
   * <code>int64 value_ms_epoch = 4;</code>
   */
  private void clearValueMsEpoch() {

    valueMsEpoch_ = 0L;
  }

  public static final int TIMEZONE_OFFSET_DATE_FIELD_NUMBER = 5;
  private int timezoneOffsetDate_;
  /**
   *
   *
   * <pre>
   * The number representing the time zone offset from UTC, in minutes.
   * If set, the `value_ms_epoch` is displayed in the specified time zone.
   * If unset, the value defaults to the user's time zone setting.
   * </pre>
   *
   * <code>int32 timezone_offset_date = 5;</code>
   *
   * @return The timezoneOffsetDate.
   */
  @java.lang.Override
  public int getTimezoneOffsetDate() {
    return timezoneOffsetDate_;
  }
  /**
   *
   *
   * <pre>
   * The number representing the time zone offset from UTC, in minutes.
   * If set, the `value_ms_epoch` is displayed in the specified time zone.
   * If unset, the value defaults to the user's time zone setting.
   * </pre>
   *
   * <code>int32 timezone_offset_date = 5;</code>
   *
   * @param value The timezoneOffsetDate to set.
   */
  private void setTimezoneOffsetDate(int value) {

    timezoneOffsetDate_ = value;
  }
  /**
   *
   *
   * <pre>
   * The number representing the time zone offset from UTC, in minutes.
   * If set, the `value_ms_epoch` is displayed in the specified time zone.
   * If unset, the value defaults to the user's time zone setting.
   * </pre>
   *
   * <code>int32 timezone_offset_date = 5;</code>
   */
  private void clearTimezoneOffsetDate() {

    timezoneOffsetDate_ = 0;
  }

  public static final int ON_CHANGE_ACTION_FIELD_NUMBER = 6;
  private com.google.apps.card.v1.Action onChangeAction_;
  /**
   *
   *
   * <pre>
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   * </pre>
   *
   * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
   */
  @java.lang.Override
  public boolean hasOnChangeAction() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   * </pre>
   *
   * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
   */
  @java.lang.Override
  public com.google.apps.card.v1.Action getOnChangeAction() {
    return onChangeAction_ == null
        ? com.google.apps.card.v1.Action.getDefaultInstance()
        : onChangeAction_;
  }
  /**
   *
   *
   * <pre>
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   * </pre>
   *
   * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
   */
  private void setOnChangeAction(com.google.apps.card.v1.Action value) {
    value.getClass();
    onChangeAction_ = value;
    bitField0_ |= 0x00000001;
  }
  /**
   *
   *
   * <pre>
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   * </pre>
   *
   * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOnChangeAction(com.google.apps.card.v1.Action value) {
    value.getClass();
    if (onChangeAction_ != null
        && onChangeAction_ != com.google.apps.card.v1.Action.getDefaultInstance()) {
      onChangeAction_ =
          com.google.apps.card.v1.Action.newBuilder(onChangeAction_)
              .mergeFrom(value)
              .buildPartial();
    } else {
      onChangeAction_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   *
   *
   * <pre>
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   * </pre>
   *
   * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
   */
  private void clearOnChangeAction() {
    onChangeAction_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.DateTimePicker parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.DateTimePicker parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.DateTimePicker parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }

  public static Builder newBuilder(com.google.apps.card.v1.DateTimePicker prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   *
   *
   * <pre>
   * Lets users input a date, a time, or both a date and a time. For an example in
   * Google Chat apps, see [Let a user pick a date and
   * time](https://developers.google.com/workspace/chat/design-interactive-card-dialog#let_a_user_pick_a_date_and_time).
   *
   * Users can input text or use the picker to select dates and times. If users
   * input an invalid date or time, the picker shows an error that prompts users
   * to input the information correctly.
   *
   * [Google Workspace
   * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
   * </pre>
   *
   * Protobuf type {@code google.apps.card.v1.DateTimePicker}
   */
  public static final class Builder
      extends com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.apps.card.v1.DateTimePicker, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.apps.card.v1.DateTimePicker)
      com.google.apps.card.v1.DateTimePickerOrBuilder {
    // Construct using com.google.apps.card.v1.DateTimePicker.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    /**
     *
     *
     * <pre>
     * The name by which the `DateTimePicker` is identified in a form input event.
     *
     * For details about working with form inputs, see [Receive form
     * data](https://developers.google.com/workspace/chat/read-form-data).
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     *
     *
     * <pre>
     * The name by which the `DateTimePicker` is identified in a form input event.
     *
     * For details about working with form inputs, see [Receive form
     * data](https://developers.google.com/workspace/chat/read-form-data).
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     *
     *
     * <pre>
     * The name by which the `DateTimePicker` is identified in a form input event.
     *
     * For details about working with form inputs, see [Receive form
     * data](https://developers.google.com/workspace/chat/read-form-data).
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The name by which the `DateTimePicker` is identified in a form input event.
     *
     * For details about working with form inputs, see [Receive form
     * data](https://developers.google.com/workspace/chat/read-form-data).
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The name by which the `DateTimePicker` is identified in a form input event.
     *
     * For details about working with form inputs, see [Receive form
     * data](https://developers.google.com/workspace/chat/read-form-data).
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * The text that prompts users to input a date, a time, or a date and time.
     * For example, if users are scheduling an appointment, use a label such as
     * `Appointment date` or `Appointment date and time`.
     * </pre>
     *
     * <code>string label = 2;</code>
     *
     * @return The label.
     */
    @java.lang.Override
    public java.lang.String getLabel() {
      return instance.getLabel();
    }
    /**
     *
     *
     * <pre>
     * The text that prompts users to input a date, a time, or a date and time.
     * For example, if users are scheduling an appointment, use a label such as
     * `Appointment date` or `Appointment date and time`.
     * </pre>
     *
     * <code>string label = 2;</code>
     *
     * @return The bytes for label.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getLabelBytes() {
      return instance.getLabelBytes();
    }
    /**
     *
     *
     * <pre>
     * The text that prompts users to input a date, a time, or a date and time.
     * For example, if users are scheduling an appointment, use a label such as
     * `Appointment date` or `Appointment date and time`.
     * </pre>
     *
     * <code>string label = 2;</code>
     *
     * @param value The label to set.
     * @return This builder for chaining.
     */
    public Builder setLabel(java.lang.String value) {
      copyOnWrite();
      instance.setLabel(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The text that prompts users to input a date, a time, or a date and time.
     * For example, if users are scheduling an appointment, use a label such as
     * `Appointment date` or `Appointment date and time`.
     * </pre>
     *
     * <code>string label = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearLabel() {
      copyOnWrite();
      instance.clearLabel();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The text that prompts users to input a date, a time, or a date and time.
     * For example, if users are scheduling an appointment, use a label such as
     * `Appointment date` or `Appointment date and time`.
     * </pre>
     *
     * <code>string label = 2;</code>
     *
     * @param value The bytes for label to set.
     * @return This builder for chaining.
     */
    public Builder setLabelBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLabelBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * Whether the widget supports inputting a date, a time, or the date and time.
     * </pre>
     *
     * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
     *
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override
    public int getTypeValue() {
      return instance.getTypeValue();
    }
    /**
     *
     *
     * <pre>
     * Whether the widget supports inputting a date, a time, or the date and time.
     * </pre>
     *
     * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
     *
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      copyOnWrite();
      instance.setTypeValue(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether the widget supports inputting a date, a time, or the date and time.
     * </pre>
     *
     * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
     *
     * @return The type.
     */
    @java.lang.Override
    public com.google.apps.card.v1.DateTimePicker.DateTimePickerType getType() {
      return instance.getType();
    }
    /**
     *
     *
     * <pre>
     * Whether the widget supports inputting a date, a time, or the date and time.
     * </pre>
     *
     * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
     *
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setType(com.google.apps.card.v1.DateTimePicker.DateTimePickerType value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Whether the widget supports inputting a date, a time, or the date and time.
     * </pre>
     *
     * <code>.google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The default value displayed in the widget, in milliseconds since [Unix
     * epoch time](https://en.wikipedia.org/wiki/Unix_time).
     *
     * Specify the value based on the type of picker (`DateTimePickerType`):
     *
     * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
     *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
     * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
     *   January 1, 2023, use `1672531200000`.
     * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
     *   `43200000` (or `12 * 60 * 60 * 1000`).
     * </pre>
     *
     * <code>int64 value_ms_epoch = 4;</code>
     *
     * @return The valueMsEpoch.
     */
    @java.lang.Override
    public long getValueMsEpoch() {
      return instance.getValueMsEpoch();
    }
    /**
     *
     *
     * <pre>
     * The default value displayed in the widget, in milliseconds since [Unix
     * epoch time](https://en.wikipedia.org/wiki/Unix_time).
     *
     * Specify the value based on the type of picker (`DateTimePickerType`):
     *
     * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
     *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
     * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
     *   January 1, 2023, use `1672531200000`.
     * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
     *   `43200000` (or `12 * 60 * 60 * 1000`).
     * </pre>
     *
     * <code>int64 value_ms_epoch = 4;</code>
     *
     * @param value The valueMsEpoch to set.
     * @return This builder for chaining.
     */
    public Builder setValueMsEpoch(long value) {
      copyOnWrite();
      instance.setValueMsEpoch(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The default value displayed in the widget, in milliseconds since [Unix
     * epoch time](https://en.wikipedia.org/wiki/Unix_time).
     *
     * Specify the value based on the type of picker (`DateTimePickerType`):
     *
     * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
     *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
     * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
     *   January 1, 2023, use `1672531200000`.
     * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
     *   `43200000` (or `12 * 60 * 60 * 1000`).
     * </pre>
     *
     * <code>int64 value_ms_epoch = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearValueMsEpoch() {
      copyOnWrite();
      instance.clearValueMsEpoch();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The number representing the time zone offset from UTC, in minutes.
     * If set, the `value_ms_epoch` is displayed in the specified time zone.
     * If unset, the value defaults to the user's time zone setting.
     * </pre>
     *
     * <code>int32 timezone_offset_date = 5;</code>
     *
     * @return The timezoneOffsetDate.
     */
    @java.lang.Override
    public int getTimezoneOffsetDate() {
      return instance.getTimezoneOffsetDate();
    }
    /**
     *
     *
     * <pre>
     * The number representing the time zone offset from UTC, in minutes.
     * If set, the `value_ms_epoch` is displayed in the specified time zone.
     * If unset, the value defaults to the user's time zone setting.
     * </pre>
     *
     * <code>int32 timezone_offset_date = 5;</code>
     *
     * @param value The timezoneOffsetDate to set.
     * @return This builder for chaining.
     */
    public Builder setTimezoneOffsetDate(int value) {
      copyOnWrite();
      instance.setTimezoneOffsetDate(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The number representing the time zone offset from UTC, in minutes.
     * If set, the `value_ms_epoch` is displayed in the specified time zone.
     * If unset, the value defaults to the user's time zone setting.
     * </pre>
     *
     * <code>int32 timezone_offset_date = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTimezoneOffsetDate() {
      copyOnWrite();
      instance.clearTimezoneOffsetDate();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    @java.lang.Override
    public boolean hasOnChangeAction() {
      return instance.hasOnChangeAction();
    }
    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    @java.lang.Override
    public com.google.apps.card.v1.Action getOnChangeAction() {
      return instance.getOnChangeAction();
    }
    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    public Builder setOnChangeAction(com.google.apps.card.v1.Action value) {
      copyOnWrite();
      instance.setOnChangeAction(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    public Builder setOnChangeAction(com.google.apps.card.v1.Action.Builder builderForValue) {
      copyOnWrite();
      instance.setOnChangeAction(builderForValue.build());
      return this;
    }
    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    public Builder mergeOnChangeAction(com.google.apps.card.v1.Action value) {
      copyOnWrite();
      instance.mergeOnChangeAction(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Triggered when the user clicks **Save** or **Clear** from the
     * `DateTimePicker` interface.
     * </pre>
     *
     * <code>.google.apps.card.v1.Action on_change_action = 6;</code>
     */
    public Builder clearOnChangeAction() {
      copyOnWrite();
      instance.clearOnChangeAction();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.apps.card.v1.DateTimePicker)
  }

  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0,
      java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE:
        {
          return new com.google.apps.card.v1.DateTimePicker();
        }
      case NEW_BUILDER:
        {
          return new Builder();
        }
      case BUILD_MESSAGE_INFO:
        {
          java.lang.Object[] objects =
              new java.lang.Object[] {
                "bitField0_",
                "name_",
                "label_",
                "type_",
                "valueMsEpoch_",
                "timezoneOffsetDate_",
                "onChangeAction_",
              };
          java.lang.String info =
              "\u0000\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u0208\u0002\u0208"
                  + "\u0003\f\u0004\u0002\u0005\u0004\u0006\u1009\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
      case GET_DEFAULT_INSTANCE:
        {
          return DEFAULT_INSTANCE;
        }
      case GET_PARSER:
        {
          com.google.protobuf.Parser<com.google.apps.card.v1.DateTimePicker> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.apps.card.v1.DateTimePicker.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.apps.card.v1.DateTimePicker>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
        }
      case GET_MEMOIZED_IS_INITIALIZED:
        {
          return (byte) 1;
        }
      case SET_MEMOIZED_IS_INITIALIZED:
        {
          return null;
        }
    }
    throw new UnsupportedOperationException();
  }

  // @@protoc_insertion_point(class_scope:google.apps.card.v1.DateTimePicker)
  private static final com.google.apps.card.v1.DateTimePicker DEFAULT_INSTANCE;

  static {
    DateTimePicker defaultInstance = new DateTimePicker();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DateTimePicker.class, defaultInstance);
  }

  public static com.google.apps.card.v1.DateTimePicker getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DateTimePicker> PARSER;

  public static com.google.protobuf.Parser<DateTimePicker> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
