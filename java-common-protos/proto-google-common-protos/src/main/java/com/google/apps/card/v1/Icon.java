/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/card/v1/card.proto

// Protobuf Java Version: 3.25.5
package com.google.apps.card.v1;

/**
 *
 *
 * <pre>
 * An icon displayed in a widget on a card. For an example in Google Chat apps,
 * see [Add an
 * icon](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_icon).
 *
 * Supports
 * [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
 * and
 * [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
 * icons.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * </pre>
 *
 * Protobuf type {@code google.apps.card.v1.Icon}
 */
public final class Icon extends com.google.protobuf.GeneratedMessageLite<Icon, Icon.Builder>
    implements
    // @@protoc_insertion_point(message_implements:google.apps.card.v1.Icon)
    IconOrBuilder {
  private Icon() {
    altText_ = "";
  }

  private int iconsCase_ = 0;
  private java.lang.Object icons_;

  public enum IconsCase {
    KNOWN_ICON(1),
    ICON_URL(2),
    MATERIAL_ICON(5),
    ICONS_NOT_SET(0);
    private final int value;

    private IconsCase(int value) {
      this.value = value;
    }
    /** @deprecated Use {@link #forNumber(int)} instead. */
    @java.lang.Deprecated
    public static IconsCase valueOf(int value) {
      return forNumber(value);
    }

    public static IconsCase forNumber(int value) {
      switch (value) {
        case 1:
          return KNOWN_ICON;
        case 2:
          return ICON_URL;
        case 5:
          return MATERIAL_ICON;
        case 0:
          return ICONS_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public IconsCase getIconsCase() {
    return IconsCase.forNumber(iconsCase_);
  }

  private void clearIcons() {
    iconsCase_ = 0;
    icons_ = null;
  }

  public static final int KNOWN_ICON_FIELD_NUMBER = 1;
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   *
   * @return Whether the knownIcon field is set.
   */
  @java.lang.Override
  public boolean hasKnownIcon() {
    return iconsCase_ == 1;
  }
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   *
   * @return The knownIcon.
   */
  @java.lang.Override
  public java.lang.String getKnownIcon() {
    java.lang.String ref = "";
    if (iconsCase_ == 1) {
      ref = (java.lang.String) icons_;
    }
    return ref;
  }
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   *
   * @return The bytes for knownIcon.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getKnownIconBytes() {
    java.lang.String ref = "";
    if (iconsCase_ == 1) {
      ref = (java.lang.String) icons_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   *
   * @param value The knownIcon to set.
   */
  private void setKnownIcon(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
    iconsCase_ = 1;
    icons_ = value;
  }
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   */
  private void clearKnownIcon() {
    if (iconsCase_ == 1) {
      iconsCase_ = 0;
      icons_ = null;
    }
  }
  /**
   *
   *
   * <pre>
   * Display one of the built-in icons provided by Google Workspace.
   *
   * For example, to display an airplane icon, specify `AIRPLANE`.
   * For a bus, specify `BUS`.
   *
   * For a full list of supported icons, see [built-in
   * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
   * </pre>
   *
   * <code>string known_icon = 1;</code>
   *
   * @param value The bytes for knownIcon to set.
   */
  private void setKnownIconBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    icons_ = value.toStringUtf8();
    iconsCase_ = 1;
  }

  public static final int ICON_URL_FIELD_NUMBER = 2;
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   *
   * @return Whether the iconUrl field is set.
   */
  @java.lang.Override
  public boolean hasIconUrl() {
    return iconsCase_ == 2;
  }
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   *
   * @return The iconUrl.
   */
  @java.lang.Override
  public java.lang.String getIconUrl() {
    java.lang.String ref = "";
    if (iconsCase_ == 2) {
      ref = (java.lang.String) icons_;
    }
    return ref;
  }
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   *
   * @return The bytes for iconUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getIconUrlBytes() {
    java.lang.String ref = "";
    if (iconsCase_ == 2) {
      ref = (java.lang.String) icons_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   *
   * @param value The iconUrl to set.
   */
  private void setIconUrl(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
    iconsCase_ = 2;
    icons_ = value;
  }
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   */
  private void clearIconUrl() {
    if (iconsCase_ == 2) {
      iconsCase_ = 0;
      icons_ = null;
    }
  }
  /**
   *
   *
   * <pre>
   * Display a custom icon hosted at an HTTPS URL.
   *
   * For example:
   *
   * ```
   * "iconUrl":
   * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
   * ```
   *
   * Supported file types include `.png` and `.jpg`.
   * </pre>
   *
   * <code>string icon_url = 2;</code>
   *
   * @param value The bytes for iconUrl to set.
   */
  private void setIconUrlBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    icons_ = value.toStringUtf8();
    iconsCase_ = 2;
  }

  public static final int MATERIAL_ICON_FIELD_NUMBER = 5;
  /**
   *
   *
   * <pre>
   * Display one of the [Google Material
   * Icons](https://fonts.google.com/icons).
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
   * use
   * ```
   * "material_icon": {
   *   "name": "check_box"
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
   */
  @java.lang.Override
  public boolean hasMaterialIcon() {
    return iconsCase_ == 5;
  }
  /**
   *
   *
   * <pre>
   * Display one of the [Google Material
   * Icons](https://fonts.google.com/icons).
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
   * use
   * ```
   * "material_icon": {
   *   "name": "check_box"
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
   */
  @java.lang.Override
  public com.google.apps.card.v1.MaterialIcon getMaterialIcon() {
    if (iconsCase_ == 5) {
      return (com.google.apps.card.v1.MaterialIcon) icons_;
    }
    return com.google.apps.card.v1.MaterialIcon.getDefaultInstance();
  }
  /**
   *
   *
   * <pre>
   * Display one of the [Google Material
   * Icons](https://fonts.google.com/icons).
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
   * use
   * ```
   * "material_icon": {
   *   "name": "check_box"
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
   */
  private void setMaterialIcon(com.google.apps.card.v1.MaterialIcon value) {
    value.getClass();
    icons_ = value;
    iconsCase_ = 5;
  }
  /**
   *
   *
   * <pre>
   * Display one of the [Google Material
   * Icons](https://fonts.google.com/icons).
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
   * use
   * ```
   * "material_icon": {
   *   "name": "check_box"
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
   */
  private void mergeMaterialIcon(com.google.apps.card.v1.MaterialIcon value) {
    value.getClass();
    if (iconsCase_ == 5 && icons_ != com.google.apps.card.v1.MaterialIcon.getDefaultInstance()) {
      icons_ =
          com.google.apps.card.v1.MaterialIcon.newBuilder(
                  (com.google.apps.card.v1.MaterialIcon) icons_)
              .mergeFrom(value)
              .buildPartial();
    } else {
      icons_ = value;
    }
    iconsCase_ = 5;
  }
  /**
   *
   *
   * <pre>
   * Display one of the [Google Material
   * Icons](https://fonts.google.com/icons).
   *
   * For example, to display a [checkbox
   * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
   * use
   * ```
   * "material_icon": {
   *   "name": "check_box"
   * }
   * ```
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   * </pre>
   *
   * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
   */
  private void clearMaterialIcon() {
    if (iconsCase_ == 5) {
      iconsCase_ = 0;
      icons_ = null;
    }
  }

  public static final int ALT_TEXT_FIELD_NUMBER = 3;
  private java.lang.String altText_;
  /**
   *
   *
   * <pre>
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   * </pre>
   *
   * <code>string alt_text = 3;</code>
   *
   * @return The altText.
   */
  @java.lang.Override
  public java.lang.String getAltText() {
    return altText_;
  }
  /**
   *
   *
   * <pre>
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   * </pre>
   *
   * <code>string alt_text = 3;</code>
   *
   * @return The bytes for altText.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getAltTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(altText_);
  }
  /**
   *
   *
   * <pre>
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   * </pre>
   *
   * <code>string alt_text = 3;</code>
   *
   * @param value The altText to set.
   */
  private void setAltText(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    altText_ = value;
  }
  /**
   *
   *
   * <pre>
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   * </pre>
   *
   * <code>string alt_text = 3;</code>
   */
  private void clearAltText() {

    altText_ = getDefaultInstance().getAltText();
  }
  /**
   *
   *
   * <pre>
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   * </pre>
   *
   * <code>string alt_text = 3;</code>
   *
   * @param value The bytes for altText to set.
   */
  private void setAltTextBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    altText_ = value.toStringUtf8();
  }

  public static final int IMAGE_TYPE_FIELD_NUMBER = 4;
  private int imageType_;
  /**
   *
   *
   * <pre>
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   * </pre>
   *
   * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
   *
   * @return The enum numeric value on the wire for imageType.
   */
  @java.lang.Override
  public int getImageTypeValue() {
    return imageType_;
  }
  /**
   *
   *
   * <pre>
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   * </pre>
   *
   * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
   *
   * @return The imageType.
   */
  @java.lang.Override
  public com.google.apps.card.v1.Widget.ImageType getImageType() {
    com.google.apps.card.v1.Widget.ImageType result =
        com.google.apps.card.v1.Widget.ImageType.forNumber(imageType_);
    return result == null ? com.google.apps.card.v1.Widget.ImageType.UNRECOGNIZED : result;
  }
  /**
   *
   *
   * <pre>
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   * </pre>
   *
   * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
   *
   * @param value The enum numeric value on the wire for imageType to set.
   */
  private void setImageTypeValue(int value) {
    imageType_ = value;
  }
  /**
   *
   *
   * <pre>
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   * </pre>
   *
   * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
   *
   * @param value The imageType to set.
   */
  private void setImageType(com.google.apps.card.v1.Widget.ImageType value) {
    imageType_ = value.getNumber();
  }
  /**
   *
   *
   * <pre>
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   * </pre>
   *
   * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
   */
  private void clearImageType() {

    imageType_ = 0;
  }

  public static com.google.apps.card.v1.Icon parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Icon parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Icon parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Icon parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Icon parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Icon parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Icon parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Icon parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.Icon parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Icon parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.Icon parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Icon parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }

  public static Builder newBuilder(com.google.apps.card.v1.Icon prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   *
   *
   * <pre>
   * An icon displayed in a widget on a card. For an example in Google Chat apps,
   * see [Add an
   * icon](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_icon).
   *
   * Supports
   * [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
   * and
   * [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
   * icons.
   *
   * [Google Workspace Add-ons and Chat
   * apps](https://developers.google.com/workspace/extend):
   * </pre>
   *
   * Protobuf type {@code google.apps.card.v1.Icon}
   */
  public static final class Builder
      extends com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.apps.card.v1.Icon, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.apps.card.v1.Icon)
      com.google.apps.card.v1.IconOrBuilder {
    // Construct using com.google.apps.card.v1.Icon.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public IconsCase getIconsCase() {
      return instance.getIconsCase();
    }

    public Builder clearIcons() {
      copyOnWrite();
      instance.clearIcons();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @return Whether the knownIcon field is set.
     */
    @java.lang.Override
    public boolean hasKnownIcon() {
      return instance.hasKnownIcon();
    }
    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @return The knownIcon.
     */
    @java.lang.Override
    public java.lang.String getKnownIcon() {
      return instance.getKnownIcon();
    }
    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @return The bytes for knownIcon.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKnownIconBytes() {
      return instance.getKnownIconBytes();
    }
    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @param value The knownIcon to set.
     * @return This builder for chaining.
     */
    public Builder setKnownIcon(java.lang.String value) {
      copyOnWrite();
      instance.setKnownIcon(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearKnownIcon() {
      copyOnWrite();
      instance.clearKnownIcon();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     * </pre>
     *
     * <code>string known_icon = 1;</code>
     *
     * @param value The bytes for knownIcon to set.
     * @return This builder for chaining.
     */
    public Builder setKnownIconBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKnownIconBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @return Whether the iconUrl field is set.
     */
    @java.lang.Override
    public boolean hasIconUrl() {
      return instance.hasIconUrl();
    }
    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @return The iconUrl.
     */
    @java.lang.Override
    public java.lang.String getIconUrl() {
      return instance.getIconUrl();
    }
    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @return The bytes for iconUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getIconUrlBytes() {
      return instance.getIconUrlBytes();
    }
    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @param value The iconUrl to set.
     * @return This builder for chaining.
     */
    public Builder setIconUrl(java.lang.String value) {
      copyOnWrite();
      instance.setIconUrl(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearIconUrl() {
      copyOnWrite();
      instance.clearIconUrl();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     * </pre>
     *
     * <code>string icon_url = 2;</code>
     *
     * @param value The bytes for iconUrl to set.
     * @return This builder for chaining.
     */
    public Builder setIconUrlBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIconUrlBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    @java.lang.Override
    public boolean hasMaterialIcon() {
      return instance.hasMaterialIcon();
    }
    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    @java.lang.Override
    public com.google.apps.card.v1.MaterialIcon getMaterialIcon() {
      return instance.getMaterialIcon();
    }
    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    public Builder setMaterialIcon(com.google.apps.card.v1.MaterialIcon value) {
      copyOnWrite();
      instance.setMaterialIcon(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    public Builder setMaterialIcon(com.google.apps.card.v1.MaterialIcon.Builder builderForValue) {
      copyOnWrite();
      instance.setMaterialIcon(builderForValue.build());
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    public Builder mergeMaterialIcon(com.google.apps.card.v1.MaterialIcon value) {
      copyOnWrite();
      instance.mergeMaterialIcon(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     * </pre>
     *
     * <code>.google.apps.card.v1.MaterialIcon material_icon = 5;</code>
     */
    public Builder clearMaterialIcon() {
      copyOnWrite();
      instance.clearMaterialIcon();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. A description of the icon used for accessibility.
     * If unspecified, the default value `Button` is provided. As a best practice,
     * you should set a helpful description for what the icon displays, and if
     * applicable, what it does. For example, `A user's account portrait`, or
     * `Opens a new browser tab and navigates to the Google Chat developer
     * documentation at https://developers.google.com/workspace/chat`.
     *
     * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
     * `altText` appears as helper text when the user hovers over the button.
     * However, if the button also sets `text`, the icon's `altText` is ignored.
     * </pre>
     *
     * <code>string alt_text = 3;</code>
     *
     * @return The altText.
     */
    @java.lang.Override
    public java.lang.String getAltText() {
      return instance.getAltText();
    }
    /**
     *
     *
     * <pre>
     * Optional. A description of the icon used for accessibility.
     * If unspecified, the default value `Button` is provided. As a best practice,
     * you should set a helpful description for what the icon displays, and if
     * applicable, what it does. For example, `A user's account portrait`, or
     * `Opens a new browser tab and navigates to the Google Chat developer
     * documentation at https://developers.google.com/workspace/chat`.
     *
     * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
     * `altText` appears as helper text when the user hovers over the button.
     * However, if the button also sets `text`, the icon's `altText` is ignored.
     * </pre>
     *
     * <code>string alt_text = 3;</code>
     *
     * @return The bytes for altText.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getAltTextBytes() {
      return instance.getAltTextBytes();
    }
    /**
     *
     *
     * <pre>
     * Optional. A description of the icon used for accessibility.
     * If unspecified, the default value `Button` is provided. As a best practice,
     * you should set a helpful description for what the icon displays, and if
     * applicable, what it does. For example, `A user's account portrait`, or
     * `Opens a new browser tab and navigates to the Google Chat developer
     * documentation at https://developers.google.com/workspace/chat`.
     *
     * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
     * `altText` appears as helper text when the user hovers over the button.
     * However, if the button also sets `text`, the icon's `altText` is ignored.
     * </pre>
     *
     * <code>string alt_text = 3;</code>
     *
     * @param value The altText to set.
     * @return This builder for chaining.
     */
    public Builder setAltText(java.lang.String value) {
      copyOnWrite();
      instance.setAltText(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. A description of the icon used for accessibility.
     * If unspecified, the default value `Button` is provided. As a best practice,
     * you should set a helpful description for what the icon displays, and if
     * applicable, what it does. For example, `A user's account portrait`, or
     * `Opens a new browser tab and navigates to the Google Chat developer
     * documentation at https://developers.google.com/workspace/chat`.
     *
     * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
     * `altText` appears as helper text when the user hovers over the button.
     * However, if the button also sets `text`, the icon's `altText` is ignored.
     * </pre>
     *
     * <code>string alt_text = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAltText() {
      copyOnWrite();
      instance.clearAltText();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Optional. A description of the icon used for accessibility.
     * If unspecified, the default value `Button` is provided. As a best practice,
     * you should set a helpful description for what the icon displays, and if
     * applicable, what it does. For example, `A user's account portrait`, or
     * `Opens a new browser tab and navigates to the Google Chat developer
     * documentation at https://developers.google.com/workspace/chat`.
     *
     * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
     * `altText` appears as helper text when the user hovers over the button.
     * However, if the button also sets `text`, the icon's `altText` is ignored.
     * </pre>
     *
     * <code>string alt_text = 3;</code>
     *
     * @param value The bytes for altText to set.
     * @return This builder for chaining.
     */
    public Builder setAltTextBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAltTextBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * The crop style applied to the image. In some cases, applying a
     * `CIRCLE` crop causes the image to be drawn larger than a built-in
     * icon.
     * </pre>
     *
     * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
     *
     * @return The enum numeric value on the wire for imageType.
     */
    @java.lang.Override
    public int getImageTypeValue() {
      return instance.getImageTypeValue();
    }
    /**
     *
     *
     * <pre>
     * The crop style applied to the image. In some cases, applying a
     * `CIRCLE` crop causes the image to be drawn larger than a built-in
     * icon.
     * </pre>
     *
     * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
     *
     * @param value The imageType to set.
     * @return This builder for chaining.
     */
    public Builder setImageTypeValue(int value) {
      copyOnWrite();
      instance.setImageTypeValue(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The crop style applied to the image. In some cases, applying a
     * `CIRCLE` crop causes the image to be drawn larger than a built-in
     * icon.
     * </pre>
     *
     * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
     *
     * @return The imageType.
     */
    @java.lang.Override
    public com.google.apps.card.v1.Widget.ImageType getImageType() {
      return instance.getImageType();
    }
    /**
     *
     *
     * <pre>
     * The crop style applied to the image. In some cases, applying a
     * `CIRCLE` crop causes the image to be drawn larger than a built-in
     * icon.
     * </pre>
     *
     * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
     *
     * @param value The enum numeric value on the wire for imageType to set.
     * @return This builder for chaining.
     */
    public Builder setImageType(com.google.apps.card.v1.Widget.ImageType value) {
      copyOnWrite();
      instance.setImageType(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The crop style applied to the image. In some cases, applying a
     * `CIRCLE` crop causes the image to be drawn larger than a built-in
     * icon.
     * </pre>
     *
     * <code>.google.apps.card.v1.Widget.ImageType image_type = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearImageType() {
      copyOnWrite();
      instance.clearImageType();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.apps.card.v1.Icon)
  }

  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0,
      java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE:
        {
          return new com.google.apps.card.v1.Icon();
        }
      case NEW_BUILDER:
        {
          return new Builder();
        }
      case BUILD_MESSAGE_INFO:
        {
          java.lang.Object[] objects =
              new java.lang.Object[] {
                "icons_",
                "iconsCase_",
                "altText_",
                "imageType_",
                com.google.apps.card.v1.MaterialIcon.class,
              };
          java.lang.String info =
              "\u0000\u0005\u0001\u0000\u0001\u0005\u0005\u0000\u0000\u0000\u0001\u023b\u0000\u0002"
                  + "\u023b\u0000\u0003\u0208\u0004\f\u0005<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
      case GET_DEFAULT_INSTANCE:
        {
          return DEFAULT_INSTANCE;
        }
      case GET_PARSER:
        {
          com.google.protobuf.Parser<com.google.apps.card.v1.Icon> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.apps.card.v1.Icon.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.apps.card.v1.Icon>(DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
        }
      case GET_MEMOIZED_IS_INITIALIZED:
        {
          return (byte) 1;
        }
      case SET_MEMOIZED_IS_INITIALIZED:
        {
          return null;
        }
    }
    throw new UnsupportedOperationException();
  }

  // @@protoc_insertion_point(class_scope:google.apps.card.v1.Icon)
  private static final com.google.apps.card.v1.Icon DEFAULT_INSTANCE;

  static {
    Icon defaultInstance = new Icon();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Icon.class, defaultInstance);
  }

  public static com.google.apps.card.v1.Icon getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Icon> PARSER;

  public static com.google.protobuf.Parser<Icon> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
