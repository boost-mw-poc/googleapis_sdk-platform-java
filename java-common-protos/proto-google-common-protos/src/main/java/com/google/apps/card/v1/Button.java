/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/card/v1/card.proto

// Protobuf Java Version: 3.25.5
package com.google.apps.card.v1;

/**
 *
 *
 * <pre>
 * A text, icon, or text and icon button that users can click. For an example in
 * Google Chat apps, see
 * [Add a
 * button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
 *
 * To make an image a clickable button, specify an
 * [`Image`][google.apps.card.v1.Image] (not an
 * [`ImageComponent`][google.apps.card.v1.ImageComponent]) and set an
 * `onClick` action.
 *
 * [Google Workspace
 * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 * </pre>
 *
 * Protobuf type {@code google.apps.card.v1.Button}
 */
public final class Button extends com.google.protobuf.GeneratedMessageLite<Button, Button.Builder>
    implements
    // @@protoc_insertion_point(message_implements:google.apps.card.v1.Button)
    ButtonOrBuilder {
  private Button() {
    text_ = "";
    altText_ = "";
  }

  private int bitField0_;
  public static final int TEXT_FIELD_NUMBER = 1;
  private java.lang.String text_;
  /**
   *
   *
   * <pre>
   * The text displayed inside the button.
   * </pre>
   *
   * <code>string text = 1;</code>
   *
   * @return The text.
   */
  @java.lang.Override
  public java.lang.String getText() {
    return text_;
  }
  /**
   *
   *
   * <pre>
   * The text displayed inside the button.
   * </pre>
   *
   * <code>string text = 1;</code>
   *
   * @return The bytes for text.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(text_);
  }
  /**
   *
   *
   * <pre>
   * The text displayed inside the button.
   * </pre>
   *
   * <code>string text = 1;</code>
   *
   * @param value The text to set.
   */
  private void setText(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    text_ = value;
  }
  /**
   *
   *
   * <pre>
   * The text displayed inside the button.
   * </pre>
   *
   * <code>string text = 1;</code>
   */
  private void clearText() {

    text_ = getDefaultInstance().getText();
  }
  /**
   *
   *
   * <pre>
   * The text displayed inside the button.
   * </pre>
   *
   * <code>string text = 1;</code>
   *
   * @param value The bytes for text to set.
   */
  private void setTextBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    text_ = value.toStringUtf8();
  }

  public static final int ICON_FIELD_NUMBER = 2;
  private com.google.apps.card.v1.Icon icon_;
  /**
   *
   *
   * <pre>
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   * </pre>
   *
   * <code>.google.apps.card.v1.Icon icon = 2;</code>
   */
  @java.lang.Override
  public boolean hasIcon() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   *
   *
   * <pre>
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   * </pre>
   *
   * <code>.google.apps.card.v1.Icon icon = 2;</code>
   */
  @java.lang.Override
  public com.google.apps.card.v1.Icon getIcon() {
    return icon_ == null ? com.google.apps.card.v1.Icon.getDefaultInstance() : icon_;
  }
  /**
   *
   *
   * <pre>
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   * </pre>
   *
   * <code>.google.apps.card.v1.Icon icon = 2;</code>
   */
  private void setIcon(com.google.apps.card.v1.Icon value) {
    value.getClass();
    icon_ = value;
    bitField0_ |= 0x00000001;
  }
  /**
   *
   *
   * <pre>
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   * </pre>
   *
   * <code>.google.apps.card.v1.Icon icon = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeIcon(com.google.apps.card.v1.Icon value) {
    value.getClass();
    if (icon_ != null && icon_ != com.google.apps.card.v1.Icon.getDefaultInstance()) {
      icon_ = com.google.apps.card.v1.Icon.newBuilder(icon_).mergeFrom(value).buildPartial();
    } else {
      icon_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   *
   *
   * <pre>
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   * </pre>
   *
   * <code>.google.apps.card.v1.Icon icon = 2;</code>
   */
  private void clearIcon() {
    icon_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int COLOR_FIELD_NUMBER = 3;
  private com.google.type.Color color_;
  /**
   *
   *
   * <pre>
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   * </pre>
   *
   * <code>.google.type.Color color = 3;</code>
   */
  @java.lang.Override
  public boolean hasColor() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   *
   *
   * <pre>
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   * </pre>
   *
   * <code>.google.type.Color color = 3;</code>
   */
  @java.lang.Override
  public com.google.type.Color getColor() {
    return color_ == null ? com.google.type.Color.getDefaultInstance() : color_;
  }
  /**
   *
   *
   * <pre>
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   * </pre>
   *
   * <code>.google.type.Color color = 3;</code>
   */
  private void setColor(com.google.type.Color value) {
    value.getClass();
    color_ = value;
    bitField0_ |= 0x00000002;
  }
  /**
   *
   *
   * <pre>
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   * </pre>
   *
   * <code>.google.type.Color color = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeColor(com.google.type.Color value) {
    value.getClass();
    if (color_ != null && color_ != com.google.type.Color.getDefaultInstance()) {
      color_ = com.google.type.Color.newBuilder(color_).mergeFrom(value).buildPartial();
    } else {
      color_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   *
   *
   * <pre>
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   * </pre>
   *
   * <code>.google.type.Color color = 3;</code>
   */
  private void clearColor() {
    color_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int ON_CLICK_FIELD_NUMBER = 4;
  private com.google.apps.card.v1.OnClick onClick_;
  /**
   *
   *
   * <pre>
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   * </pre>
   *
   * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
   */
  @java.lang.Override
  public boolean hasOnClick() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   *
   *
   * <pre>
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   * </pre>
   *
   * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
   */
  @java.lang.Override
  public com.google.apps.card.v1.OnClick getOnClick() {
    return onClick_ == null ? com.google.apps.card.v1.OnClick.getDefaultInstance() : onClick_;
  }
  /**
   *
   *
   * <pre>
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   * </pre>
   *
   * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
   */
  private void setOnClick(com.google.apps.card.v1.OnClick value) {
    value.getClass();
    onClick_ = value;
    bitField0_ |= 0x00000004;
  }
  /**
   *
   *
   * <pre>
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   * </pre>
   *
   * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOnClick(com.google.apps.card.v1.OnClick value) {
    value.getClass();
    if (onClick_ != null && onClick_ != com.google.apps.card.v1.OnClick.getDefaultInstance()) {
      onClick_ =
          com.google.apps.card.v1.OnClick.newBuilder(onClick_).mergeFrom(value).buildPartial();
    } else {
      onClick_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   *
   *
   * <pre>
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   * </pre>
   *
   * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
   */
  private void clearOnClick() {
    onClick_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int DISABLED_FIELD_NUMBER = 5;
  private boolean disabled_;
  /**
   *
   *
   * <pre>
   * If `true`, the button is displayed in an inactive state and doesn't respond
   * to user actions.
   * </pre>
   *
   * <code>bool disabled = 5;</code>
   *
   * @return The disabled.
   */
  @java.lang.Override
  public boolean getDisabled() {
    return disabled_;
  }
  /**
   *
   *
   * <pre>
   * If `true`, the button is displayed in an inactive state and doesn't respond
   * to user actions.
   * </pre>
   *
   * <code>bool disabled = 5;</code>
   *
   * @param value The disabled to set.
   */
  private void setDisabled(boolean value) {

    disabled_ = value;
  }
  /**
   *
   *
   * <pre>
   * If `true`, the button is displayed in an inactive state and doesn't respond
   * to user actions.
   * </pre>
   *
   * <code>bool disabled = 5;</code>
   */
  private void clearDisabled() {

    disabled_ = false;
  }

  public static final int ALT_TEXT_FIELD_NUMBER = 6;
  private java.lang.String altText_;
  /**
   *
   *
   * <pre>
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   * </pre>
   *
   * <code>string alt_text = 6;</code>
   *
   * @return The altText.
   */
  @java.lang.Override
  public java.lang.String getAltText() {
    return altText_;
  }
  /**
   *
   *
   * <pre>
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   * </pre>
   *
   * <code>string alt_text = 6;</code>
   *
   * @return The bytes for altText.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getAltTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(altText_);
  }
  /**
   *
   *
   * <pre>
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   * </pre>
   *
   * <code>string alt_text = 6;</code>
   *
   * @param value The altText to set.
   */
  private void setAltText(java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();

    altText_ = value;
  }
  /**
   *
   *
   * <pre>
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   * </pre>
   *
   * <code>string alt_text = 6;</code>
   */
  private void clearAltText() {

    altText_ = getDefaultInstance().getAltText();
  }
  /**
   *
   *
   * <pre>
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   * </pre>
   *
   * <code>string alt_text = 6;</code>
   *
   * @param value The bytes for altText to set.
   */
  private void setAltTextBytes(com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    altText_ = value.toStringUtf8();
  }

  public static com.google.apps.card.v1.Button parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Button parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Button parseFrom(com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Button parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Button parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, data);
  }

  public static com.google.apps.card.v1.Button parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }

  public static com.google.apps.card.v1.Button parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Button parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.Button parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Button parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static com.google.apps.card.v1.Button parseFrom(com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE, input);
  }

  public static com.google.apps.card.v1.Button parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }

  public static Builder newBuilder(com.google.apps.card.v1.Button prototype) {
    return DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   *
   *
   * <pre>
   * A text, icon, or text and icon button that users can click. For an example in
   * Google Chat apps, see
   * [Add a
   * button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
   *
   * To make an image a clickable button, specify an
   * [`Image`][google.apps.card.v1.Image] (not an
   * [`ImageComponent`][google.apps.card.v1.ImageComponent]) and set an
   * `onClick` action.
   *
   * [Google Workspace
   * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
   * </pre>
   *
   * Protobuf type {@code google.apps.card.v1.Button}
   */
  public static final class Builder
      extends com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.apps.card.v1.Button, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.apps.card.v1.Button)
      com.google.apps.card.v1.ButtonOrBuilder {
    // Construct using com.google.apps.card.v1.Button.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    /**
     *
     *
     * <pre>
     * The text displayed inside the button.
     * </pre>
     *
     * <code>string text = 1;</code>
     *
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      return instance.getText();
    }
    /**
     *
     *
     * <pre>
     * The text displayed inside the button.
     * </pre>
     *
     * <code>string text = 1;</code>
     *
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTextBytes() {
      return instance.getTextBytes();
    }
    /**
     *
     *
     * <pre>
     * The text displayed inside the button.
     * </pre>
     *
     * <code>string text = 1;</code>
     *
     * @param value The text to set.
     * @return This builder for chaining.
     */
    public Builder setText(java.lang.String value) {
      copyOnWrite();
      instance.setText(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The text displayed inside the button.
     * </pre>
     *
     * <code>string text = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearText() {
      copyOnWrite();
      instance.clearText();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The text displayed inside the button.
     * </pre>
     *
     * <code>string text = 1;</code>
     *
     * @param value The bytes for text to set.
     * @return This builder for chaining.
     */
    public Builder setTextBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextBytes(value);
      return this;
    }

    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    @java.lang.Override
    public boolean hasIcon() {
      return instance.hasIcon();
    }
    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    @java.lang.Override
    public com.google.apps.card.v1.Icon getIcon() {
      return instance.getIcon();
    }
    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    public Builder setIcon(com.google.apps.card.v1.Icon value) {
      copyOnWrite();
      instance.setIcon(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    public Builder setIcon(com.google.apps.card.v1.Icon.Builder builderForValue) {
      copyOnWrite();
      instance.setIcon(builderForValue.build());
      return this;
    }
    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    public Builder mergeIcon(com.google.apps.card.v1.Icon value) {
      copyOnWrite();
      instance.mergeIcon(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The icon image. If both `icon` and `text` are set, then the icon appears
     * before the text.
     * </pre>
     *
     * <code>.google.apps.card.v1.Icon icon = 2;</code>
     */
    public Builder clearIcon() {
      copyOnWrite();
      instance.clearIcon();
      return this;
    }

    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    @java.lang.Override
    public boolean hasColor() {
      return instance.hasColor();
    }
    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    @java.lang.Override
    public com.google.type.Color getColor() {
      return instance.getColor();
    }
    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    public Builder setColor(com.google.type.Color value) {
      copyOnWrite();
      instance.setColor(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    public Builder setColor(com.google.type.Color.Builder builderForValue) {
      copyOnWrite();
      instance.setColor(builderForValue.build());
      return this;
    }
    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    public Builder mergeColor(com.google.type.Color value) {
      copyOnWrite();
      instance.mergeColor(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * If set, the button is filled with a solid background color and the font
     * color changes to maintain contrast with the background color. For example,
     * setting a blue background likely results in white text.
     *
     * If unset, the image background is white and the font color is blue.
     *
     * For red, green, and blue, the value of each field is a `float` number that
     * you can express in either of two ways: as a number between 0 and 255
     * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
     * the absence of a color and 1 or 255/255 represent the full presence of that
     * color on the RGB scale.
     *
     * Optionally set `alpha`, which sets a level of transparency using this
     * equation:
     *
     * ```
     * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
     * ```
     *
     * For `alpha`, a value of `1` corresponds with a solid color, and a value of
     * `0` corresponds with a completely transparent color.
     *
     * For example, the following color represents a half transparent red:
     *
     * ```
     * "color": {
     *    "red": 1,
     *    "green": 0,
     *    "blue": 0,
     *    "alpha": 0.5
     * }
     * ```
     * </pre>
     *
     * <code>.google.type.Color color = 3;</code>
     */
    public Builder clearColor() {
      copyOnWrite();
      instance.clearColor();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    @java.lang.Override
    public boolean hasOnClick() {
      return instance.hasOnClick();
    }
    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    @java.lang.Override
    public com.google.apps.card.v1.OnClick getOnClick() {
      return instance.getOnClick();
    }
    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    public Builder setOnClick(com.google.apps.card.v1.OnClick value) {
      copyOnWrite();
      instance.setOnClick(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    public Builder setOnClick(com.google.apps.card.v1.OnClick.Builder builderForValue) {
      copyOnWrite();
      instance.setOnClick(builderForValue.build());
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    public Builder mergeOnClick(com.google.apps.card.v1.OnClick value) {
      copyOnWrite();
      instance.mergeOnClick(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The action to perform when a user clicks the button, such as
     * opening a hyperlink or running a custom function.
     * </pre>
     *
     * <code>.google.apps.card.v1.OnClick on_click = 4;</code>
     */
    public Builder clearOnClick() {
      copyOnWrite();
      instance.clearOnClick();
      return this;
    }

    /**
     *
     *
     * <pre>
     * If `true`, the button is displayed in an inactive state and doesn't respond
     * to user actions.
     * </pre>
     *
     * <code>bool disabled = 5;</code>
     *
     * @return The disabled.
     */
    @java.lang.Override
    public boolean getDisabled() {
      return instance.getDisabled();
    }
    /**
     *
     *
     * <pre>
     * If `true`, the button is displayed in an inactive state and doesn't respond
     * to user actions.
     * </pre>
     *
     * <code>bool disabled = 5;</code>
     *
     * @param value The disabled to set.
     * @return This builder for chaining.
     */
    public Builder setDisabled(boolean value) {
      copyOnWrite();
      instance.setDisabled(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * If `true`, the button is displayed in an inactive state and doesn't respond
     * to user actions.
     * </pre>
     *
     * <code>bool disabled = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDisabled() {
      copyOnWrite();
      instance.clearDisabled();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The alternative text that's used for accessibility.
     *
     * Set descriptive text that lets users know what the button does. For
     * example, if a button opens a hyperlink, you might write: "Opens a new
     * browser tab and navigates to the Google Chat developer documentation at
     * https://developers.google.com/workspace/chat".
     * </pre>
     *
     * <code>string alt_text = 6;</code>
     *
     * @return The altText.
     */
    @java.lang.Override
    public java.lang.String getAltText() {
      return instance.getAltText();
    }
    /**
     *
     *
     * <pre>
     * The alternative text that's used for accessibility.
     *
     * Set descriptive text that lets users know what the button does. For
     * example, if a button opens a hyperlink, you might write: "Opens a new
     * browser tab and navigates to the Google Chat developer documentation at
     * https://developers.google.com/workspace/chat".
     * </pre>
     *
     * <code>string alt_text = 6;</code>
     *
     * @return The bytes for altText.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getAltTextBytes() {
      return instance.getAltTextBytes();
    }
    /**
     *
     *
     * <pre>
     * The alternative text that's used for accessibility.
     *
     * Set descriptive text that lets users know what the button does. For
     * example, if a button opens a hyperlink, you might write: "Opens a new
     * browser tab and navigates to the Google Chat developer documentation at
     * https://developers.google.com/workspace/chat".
     * </pre>
     *
     * <code>string alt_text = 6;</code>
     *
     * @param value The altText to set.
     * @return This builder for chaining.
     */
    public Builder setAltText(java.lang.String value) {
      copyOnWrite();
      instance.setAltText(value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * The alternative text that's used for accessibility.
     *
     * Set descriptive text that lets users know what the button does. For
     * example, if a button opens a hyperlink, you might write: "Opens a new
     * browser tab and navigates to the Google Chat developer documentation at
     * https://developers.google.com/workspace/chat".
     * </pre>
     *
     * <code>string alt_text = 6;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearAltText() {
      copyOnWrite();
      instance.clearAltText();
      return this;
    }
    /**
     *
     *
     * <pre>
     * The alternative text that's used for accessibility.
     *
     * Set descriptive text that lets users know what the button does. For
     * example, if a button opens a hyperlink, you might write: "Opens a new
     * browser tab and navigates to the Google Chat developer documentation at
     * https://developers.google.com/workspace/chat".
     * </pre>
     *
     * <code>string alt_text = 6;</code>
     *
     * @param value The bytes for altText to set.
     * @return This builder for chaining.
     */
    public Builder setAltTextBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAltTextBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.apps.card.v1.Button)
  }

  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0,
      java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE:
        {
          return new com.google.apps.card.v1.Button();
        }
      case NEW_BUILDER:
        {
          return new Builder();
        }
      case BUILD_MESSAGE_INFO:
        {
          java.lang.Object[] objects =
              new java.lang.Object[] {
                "bitField0_", "text_", "icon_", "color_", "onClick_", "disabled_", "altText_",
              };
          java.lang.String info =
              "\u0000\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u0208\u0002\u1009"
                  + "\u0000\u0003\u1009\u0001\u0004\u1009\u0002\u0005\u0007\u0006\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
      case GET_DEFAULT_INSTANCE:
        {
          return DEFAULT_INSTANCE;
        }
      case GET_PARSER:
        {
          com.google.protobuf.Parser<com.google.apps.card.v1.Button> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.apps.card.v1.Button.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.apps.card.v1.Button>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
        }
      case GET_MEMOIZED_IS_INITIALIZED:
        {
          return (byte) 1;
        }
      case SET_MEMOIZED_IS_INITIALIZED:
        {
          return null;
        }
    }
    throw new UnsupportedOperationException();
  }

  // @@protoc_insertion_point(class_scope:google.apps.card.v1.Button)
  private static final com.google.apps.card.v1.Button DEFAULT_INSTANCE;

  static {
    Button defaultInstance = new Button();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(Button.class, defaultInstance);
  }

  public static com.google.apps.card.v1.Button getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Button> PARSER;

  public static com.google.protobuf.Parser<Button> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}
